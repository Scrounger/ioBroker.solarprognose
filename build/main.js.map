{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v2.6.5\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from '@iobroker/adapter-core';\r\nimport moment from 'moment';\r\nimport * as schedule from 'node-schedule';\r\n\r\nimport * as myTypes from './lib/myTypes';\r\nimport * as myHelper from './lib/helper';\r\n\r\nclass Solarprognose extends utils.Adapter {\r\n\ttestMode = true;\r\n\r\n\tapiEndpoint = 'https://www.solarprognose.de/web/solarprediction/api/v1';\r\n\tupdateSchedule: schedule.Job | undefined = undefined;\r\n\tmyTranslation: { [key: string]: any; } | undefined;\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: 'solarprognose',\r\n\t\t\tuseFormatDate: true\r\n\t\t});\r\n\t\tthis.on('ready', this.onReady.bind(this));\r\n\t\tthis.on('stateChange', this.onStateChange.bind(this));\r\n\t\t// this.on('objectChange', this.onObjectChange.bind(this));\r\n\t\t// this.on('message', this.onMessage.bind(this));\r\n\t\tthis.on('unload', this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\tconst logPrefix = '[onReady]:';\r\n\r\n\t\ttry {\r\n\t\t\t// Initialize your adapter here\r\n\t\t\tawait this.loadTranslation();\r\n\t\t\tawait this.updateData();\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\ttry {\r\n\t\t\tif (this.updateSchedule) this.updateSchedule.cancel()\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires 'common.messagebox' property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === 'object' && obj.message) {\r\n\t// \t\tif (obj.command === 'send') {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info('send command');\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\r\n\tprivate async updateData(): Promise<void> {\r\n\t\tconst logPrefix = '[updateData]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.config.project && this.config.accessToken && this.config.solarprognoseItem && this.config.solarprognoseId) {\r\n\t\t\t\tconst url = `${this.apiEndpoint}?access-token=${this.config.accessToken}&project=${this.config.project}&item=${this.config.solarprognoseItem}&id=${this.config.solarprognoseId}&type=hourly&_format=json`;\r\n\t\t\t\tconst response = await this.downloadData(url);\r\n\r\n\t\t\t\tthis.log.silly(JSON.stringify(response));\r\n\r\n\t\t\t\tif (response) {\r\n\t\t\t\t\tif (response.status === 0) {\r\n\t\t\t\t\t\tawait this.createOrUpdateState(this.namespace, myTypes.stateDefinition['statusResponse'], response.status, 'statusResponse', true);\r\n\r\n\t\t\t\t\t\tawait this.processData(response.data);\r\n\r\n\t\t\t\t\t\tif (this.updateSchedule) this.updateSchedule.cancel()\r\n\t\t\t\t\t\tconst nextUpdateTime = this.getNextUpdateTime(response.preferredNextApiRequestAt);\r\n\t\t\t\t\t\tthis.updateSchedule = schedule.scheduleJob(nextUpdateTime.toDate(), async () => {\r\n\t\t\t\t\t\t\tthis.updateData();\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tawait this.createOrUpdateState(this.namespace, myTypes.stateDefinition['lastUpdate'], moment().format(`ddd ${this.dateFormat} HH:mm:ss`), 'lastUpdate');\r\n\r\n\t\t\t\t\t\tthis.log.info(`${logPrefix} data successfully updated, next update: ${nextUpdateTime.format(`ddd ${this.dateFormat} HH:mm:ss`)}`);\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.log.error(`${logPrefix} data received with error code: ${response.status} - ${myTypes.stateDefinition.statusResponse.common.states[response.status]}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} no data received!`);\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.error(`${logPrefix} settings missing. Please check your adapter configuration!`);\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async processData(data: { [key: number]: Array<number> } | number) {\r\n\t\tconst logPrefix = '[processData]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (data) {\r\n\t\t\t\tconst jsonResult: Array<myTypes.myJsonStructure> = [];\r\n\r\n\t\t\t\tfor (var i = 0; i <= Object.keys(data).length - 1; i++) {\r\n\t\t\t\t\tconst timestamp = parseInt(Object.keys(data)[i]);\r\n\t\t\t\t\tconst momentTs = moment(timestamp * 1000);\r\n\t\t\t\t\tconst arr = Object.values(data)[i];\r\n\r\n\t\t\t\t\tjsonResult.push({\r\n\t\t\t\t\t\thuman: momentTs.format(`ddd ${this.dateFormat} HH:mm`),\r\n\t\t\t\t\t\ttimestamp: timestamp,\r\n\t\t\t\t\t\tval: arr[0],\r\n\t\t\t\t\t\ttotal: arr[1]\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif (!momentTs.isBefore(moment().startOf('day'))) {\r\n\t\t\t\t\t\t// filter out past data\r\n\t\t\t\t\t\tconst diffDays = momentTs.diff(moment().startOf('day'), 'days');\r\n\t\t\t\t\t\tconst channelDayId = `${myHelper.zeroPad(diffDays, 2)}`;\r\n\t\t\t\t\t\tconst channelHourId = `${myHelper.zeroPad(momentTs.hours(), 2)}h`\r\n\r\n\t\t\t\t\t\tif (this.config.dailyEnabled && diffDays <= this.config.dailyMax) {\r\n\t\t\t\t\t\t\tif (!Object.keys(data)[i + 1] || (Object.keys(data)[i + 1] && !momentTs.isSame(moment(parseInt(Object.keys(data)[i + 1]) * 1000), 'day'))) {\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateChannel(channelDayId, diffDays === 0 ? this.getTranslation('today') : this.getTranslation('inXDays').replace('{0}', diffDays.toString()));\r\n\r\n\t\t\t\t\t\t\t\tawait this.createOrUpdateState(channelDayId, myTypes.stateDefinition['energy'], arr[1], 'energy');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (this.config.hourlyEnabled && diffDays <= this.config.dailyMax) {\r\n\t\t\t\t\t\t\t\tif (await this.objectExists(`${channelDayId}.${myTypes.stateDefinition['energy'].id}`)) {\r\n\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${channelDayId}.${myTypes.stateDefinition['energy'].id}`);\r\n\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting state '${channelDayId}.${myTypes.stateDefinition['energy'].id}' (config.dailyEnabled: ${this.config.hourlyEnabled}, config.hourlyEnabled: ${this.config.hourlyEnabled})`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tif (await this.objectExists(`${channelDayId}`)) {\r\n\t\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${channelDayId}`, { recursive: true });\r\n\t\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${channelDayId}' (config.dailyEnabled: ${this.config.hourlyEnabled}, config.hourlyEnabled: ${this.config.hourlyEnabled})`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (this.config.hourlyEnabled && diffDays <= this.config.dailyMax) {\r\n\t\t\t\t\t\t\tawait this.createOrUpdateChannel(`${channelDayId}.${channelHourId}`, this.getTranslation('xOClock').replace('{0}', momentTs.hour().toString()));\r\n\r\n\t\t\t\t\t\t\tawait this.createOrUpdateState(`${channelDayId}.${channelHourId}`, myTypes.stateDefinition['date'], momentTs.format(`ddd ${this.dateFormat} HH:mm`), 'date');\r\n\t\t\t\t\t\t\tawait this.createOrUpdateState(`${channelDayId}.${channelHourId}`, myTypes.stateDefinition['power'], arr[0], 'power');\r\n\t\t\t\t\t\t\tawait this.createOrUpdateState(`${channelDayId}.${channelHourId}`, myTypes.stateDefinition['energy'], arr[1], 'energy');\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (await this.objectExists(`${channelDayId}.${channelHourId}`)) {\r\n\t\t\t\t\t\t\t\tawait this.delObjectAsync(`${channelDayId}.${channelHourId}`, { recursive: true });\r\n\t\t\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting channel '${channelDayId}.${channelHourId}' (config.hourlyEnabled: ${this.config.hourlyEnabled})`);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (this.config.jsonTableEnabled) {\r\n\t\t\t\t\tawait this.createOrUpdateState(this.namespace, myTypes.stateDefinition['jsonTable'], JSON.stringify(jsonResult), 'jsonTable');\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (myTypes.stateDefinition['jsonTable'].id && await this.objectExists(myTypes.stateDefinition['jsonTable'].id)) {\r\n\t\t\t\t\t\tawait this.delObjectAsync(myTypes.stateDefinition['jsonTable'].id);\r\n\t\t\t\t\t\tthis.log.info(`${logPrefix} deleting state '${myTypes.stateDefinition['jsonTable'].id}' (config.jsonTableEnabled: ${this.config.jsonTableEnabled})`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.error(`${logPrefix} received data has no forecast data!`);\r\n\t\t\t}\r\n\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate async downloadData(url: string): Promise<myTypes.dataStructure | undefined> {\r\n\t\tconst logPrefix = '[downloadData]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (!this.testMode) {\r\n\t\t\t\tconst response: any = await fetch(url);\r\n\r\n\t\t\t\tif (response.status === 200) {\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} data successfully received`);\r\n\r\n\t\t\t\t\treturn await response.json();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tthis.log.error(`${logPrefix} status code: ${response.status}`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.warn(`${logPrefix} Test mode is active!`);\r\n\r\n\t\t\t\tconst { default: data } = await import('../test/testData.json', { assert: { type: \"json\" } });\r\n\t\t\t\treturn data;\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\t}\r\n\r\n\tprivate async createOrUpdateState(idChannel: string, stateDef: myTypes.tStateDefinition, val: string | number, key: string, forceUpdate: boolean = false): Promise<boolean> {\r\n\t\tconst logPrefix = '[createOrUpdateState]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst id = `${idChannel}.${stateDef.id}`\r\n\r\n\t\t\tstateDef.common.name = this.getTranslation(key);\r\n\r\n\t\t\tif (stateDef.common.unit && Object.prototype.hasOwnProperty.call(this.config, stateDef.common.unit)) {\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tstateDef.common.unit = this.getTranslation(this.config[stateDef.common.unit]) || stateDef.common.unit\r\n\t\t\t}\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating state '${id}'`);\r\n\r\n\t\t\t\tconst obj = {\r\n\t\t\t\t\ttype: 'state',\r\n\t\t\t\t\tcommon: stateDef.common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t};\r\n\r\n\t\t\t\t//@ts-ignore\r\n\t\t\t\tawait this.setObjectAsync(id, obj);\r\n\t\t\t} else {\r\n\t\t\t\t// update State if needed\r\n\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\r\n\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\tif (JSON.stringify(obj.common) !== JSON.stringify(stateDef.common)) {\r\n\t\t\t\t\t\tawait this.extendObject(id, { common: stateDef.common });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} updated common properties of state '${id}'`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (forceUpdate) {\r\n\t\t\t\tawait this.setState(id, val, true);\r\n\t\t\t\tthis.log.silly(`${logPrefix} value of state '${id}' updated (force: ${forceUpdate})`);\r\n\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tlet changedObj: any = undefined;\r\n\r\n\t\t\t\tchangedObj = await this.setStateChangedAsync(id, val, true);\r\n\r\n\t\t\t\tif (changedObj && Object.prototype.hasOwnProperty.call(changedObj, 'notChanged') && !changedObj.notChanged) {\r\n\t\t\t\t\tthis.log.silly(`${logPrefix} value of state '${id}' changed`);\r\n\t\t\t\t\treturn !changedObj.notChanged\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n\r\n\tprivate async createOrUpdateChannel(id: string, name: string): Promise<void> {\r\n\t\tconst logPrefix = '[createOrUpdateChannel]:';\r\n\r\n\t\ttry {\r\n\t\t\tconst common = {\r\n\t\t\t\tname: name,\r\n\t\t\t\t// icon: myDeviceImages[nvr.type] ? myDeviceImages[nvr.type] : null\r\n\t\t\t};\r\n\r\n\t\t\tif (!await this.objectExists(id)) {\r\n\t\t\t\tthis.log.debug(`${logPrefix} creating channel '${id}'`);\r\n\t\t\t\tawait this.setObjectAsync(id, {\r\n\t\t\t\t\ttype: 'channel',\r\n\t\t\t\t\tcommon: common,\r\n\t\t\t\t\tnative: {}\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\tconst obj = await this.getObjectAsync(id);\r\n\r\n\t\t\t\tif (obj && obj.common) {\r\n\t\t\t\t\tif (JSON.stringify(obj.common) !== JSON.stringify(common)) {\r\n\t\t\t\t\t\tawait this.extendObject(id, { common: common });\r\n\t\t\t\t\t\tthis.log.debug(`${logPrefix} channel updated '${id}'`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} catch (error: any) {\r\n\t\t\tthis.log.error(`${logPrefix} error: ${error}, stack: ${error.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getNextUpdateTime(preferredNextApiRequestAt: myTypes.preferredNextApiRequestAt | undefined): moment.Moment {\r\n\t\tconst logPrefix = '[getNextUpdateTime]:';\r\n\r\n\t\tlet nextUpdate = moment().add(1, 'hours');\r\n\r\n\t\ttry {\r\n\t\t\tif (preferredNextApiRequestAt && preferredNextApiRequestAt.epochTimeUtc) {\r\n\t\t\t\tconst nextApiRequestLog = moment(preferredNextApiRequestAt.epochTimeUtc * 1000).format(`ddd ${this.dateFormat} HH:mm:ss`);\r\n\r\n\t\t\t\tif (!moment().isBefore(moment(preferredNextApiRequestAt.epochTimeUtc * 1000))) {\r\n\t\t\t\t\t// 'preferredNextApiRequestAt' is in the past\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} preferredNextApiRequestAt: '${nextApiRequestLog}' is in the past! Next update: ${nextUpdate.format(`ddd ${this.dateFormat} HH:mm:ss`)}`);\r\n\t\t\t\t} else if ((moment(preferredNextApiRequestAt.epochTimeUtc * 1000).diff(moment()) / (1000 * 60 * 60)) >= 1.1) {\r\n\t\t\t\t\t// 'preferredNextApiRequestAt' is more than one hour in the future\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} preferredNextApiRequestAt: '${nextApiRequestLog}' is more than one hour in the future! Next update: ${nextUpdate.format(`ddd ${this.dateFormat} HH:mm:ss`)}`);\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// using 'preferredNextApiRequestAt'\r\n\t\t\t\t\tnextUpdate = moment(preferredNextApiRequestAt.epochTimeUtc * 1000);\r\n\t\t\t\t\tthis.log.debug(`${logPrefix} next update: ${moment(preferredNextApiRequestAt.epochTimeUtc * 1000).format(`ddd ${this.dateFormat} HH:mm:ss`)} by 'preferredNextApiRequestAt'`);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.debug(`${logPrefix} no 'preferredNextApiRequestAt' exist, next update: ${nextUpdate.format(`ddd ${this.dateFormat} HH:mm:ss`)}`);\r\n\t\t\t}\r\n\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\r\n\t\treturn nextUpdate;\r\n\t}\r\n\r\n\tprivate async loadTranslation(): Promise<void> {\r\n\t\tconst logPrefix = '[loadTranslation]:';\r\n\r\n\t\ttry {\r\n\t\t\tmoment.locale(this.language || 'en');\r\n\r\n\t\t\tconst fileName = `../admin/i18n/${this.language || 'en'}/translations.json`\r\n\r\n\t\t\tthis.myTranslation = (await import(fileName, { assert: { type: 'json' } })).default;\r\n\r\n\t\t\tthis.log.debug(`${logPrefix} translation data loaded from '${fileName}'`);\r\n\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getTranslation(str: string): string {\r\n\t\tconst logPrefix = '[getTranslation]:';\r\n\r\n\t\ttry {\r\n\t\t\tif (this.myTranslation && this.myTranslation[str]) {\r\n\t\t\t\treturn this.myTranslation[str];\r\n\t\t\t} else {\r\n\t\t\t\tthis.log.warn(`${logPrefix} no translation for key '${str}' exists!`);\r\n\t\t\t}\r\n\t\t} catch (err: any) {\r\n\t\t\tconsole.error(`${logPrefix} error: ${err.message}, stack: ${err.stack}`);\r\n\t\t}\r\n\r\n\t\treturn str;\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Solarprognose(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Solarprognose())();\r\n}"],
  "mappings": "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",
  "names": ["moment"]
}
